// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagingServiceClient is the client API for MessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingServiceClient interface {
	SendMessage(ctx context.Context, in *ClientSendMessage, opts ...grpc.CallOption) (*Ack, error)
	JoinChat(ctx context.Context, in *ClientSendMessage, opts ...grpc.CallOption) (MessagingService_JoinChatClient, error)
}

type messagingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingServiceClient(cc grpc.ClientConnInterface) MessagingServiceClient {
	return &messagingServiceClient{cc}
}

func (c *messagingServiceClient) SendMessage(ctx context.Context, in *ClientSendMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/awesomeProject.MessagingService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) JoinChat(ctx context.Context, in *ClientSendMessage, opts ...grpc.CallOption) (MessagingService_JoinChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[0], "/awesomeProject.MessagingService/JoinChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceJoinChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_JoinChatClient interface {
	Recv() (*ClientSendMessage, error)
	grpc.ClientStream
}

type messagingServiceJoinChatClient struct {
	grpc.ClientStream
}

func (x *messagingServiceJoinChatClient) Recv() (*ClientSendMessage, error) {
	m := new(ClientSendMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagingServiceServer is the server API for MessagingService service.
// All implementations must embed UnimplementedMessagingServiceServer
// for forward compatibility
type MessagingServiceServer interface {
	SendMessage(context.Context, *ClientSendMessage) (*Ack, error)
	JoinChat(*ClientSendMessage, MessagingService_JoinChatServer) error
	mustEmbedUnimplementedMessagingServiceServer()
}

// UnimplementedMessagingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingServiceServer struct {
}

func (UnimplementedMessagingServiceServer) SendMessage(context.Context, *ClientSendMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessagingServiceServer) JoinChat(*ClientSendMessage, MessagingService_JoinChatServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedMessagingServiceServer) mustEmbedUnimplementedMessagingServiceServer() {}

// UnsafeMessagingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingServiceServer will
// result in compilation errors.
type UnsafeMessagingServiceServer interface {
	mustEmbedUnimplementedMessagingServiceServer()
}

func RegisterMessagingServiceServer(s grpc.ServiceRegistrar, srv MessagingServiceServer) {
	s.RegisterService(&MessagingService_ServiceDesc, srv)
}

func _MessagingService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awesomeProject.MessagingService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).SendMessage(ctx, req.(*ClientSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_JoinChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientSendMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).JoinChat(m, &messagingServiceJoinChatServer{stream})
}

type MessagingService_JoinChatServer interface {
	Send(*ClientSendMessage) error
	grpc.ServerStream
}

type messagingServiceJoinChatServer struct {
	grpc.ServerStream
}

func (x *messagingServiceJoinChatServer) Send(m *ClientSendMessage) error {
	return x.ServerStream.SendMsg(m)
}

// MessagingService_ServiceDesc is the grpc.ServiceDesc for MessagingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "awesomeProject.MessagingService",
	HandlerType: (*MessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessagingService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinChat",
			Handler:       _MessagingService_JoinChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/proto.proto",
}
